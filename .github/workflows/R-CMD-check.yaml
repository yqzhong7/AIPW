on:
  push:
    branches:
      - master
      - dev
      - cran
  pull_request:
    branches:
      - master
      - dev

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows environments
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: 'oldrel'}
          - {os: windows-latest, r: 'devel'}

          # macOS environments
          - {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'oldrel'}
          - {os: macOS-latest, r: 'devel'}

          # Linux environments
          - {os: ubuntu-latest, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest, r: 'oldrel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        run: |
          # Install gettext to fix the libintl.h missing issue
          brew install gettext
          brew link --force gettext

          # Install additional dependencies that might be needed
          brew install pkg-config
          brew install automake
          brew install libomp # For OpenMP support in data.table

          # Create Makevars to ensure compiler flags are used
          mkdir -p ~/.R
          echo "CPPFLAGS=-I/usr/local/opt/gettext/include -I/opt/homebrew/opt/gettext/include" > ~/.R/Makevars
          echo "LDFLAGS=-L/usr/local/opt/gettext/lib -L/opt/homebrew/opt/gettext/lib" >> ~/.R/Makevars
          echo "CFLAGS=-I/usr/local/opt/gettext/include -I/opt/homebrew/opt/gettext/include" >> ~/.R/Makevars

          # Set explicit paths for arm64 architecture (for GitHub Actions runners)
          if [ -d "/opt/homebrew" ]; then
            echo "CPPFLAGS=-I/opt/homebrew/opt/gettext/include -I/opt/homebrew/include" > ~/.R/Makevars
            echo "LDFLAGS=-L/opt/homebrew/opt/gettext/lib -L/opt/homebrew/lib" >> ~/.R/Makevars
            echo "CFLAGS=-I/opt/homebrew/opt/gettext/include -I/opt/homebrew/include" >> ~/.R/Makevars
          fi

          # Add OpenMP flags for data.table
          echo "SHLIB_OPENMP_CFLAGS=-Xclang -fopenmp" >> ~/.R/Makevars

          cat ~/.R/Makevars

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-1-

      - name: Install system dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

          # Additional Ubuntu packages that might be needed
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libgmp-dev libmpfr-dev

      - name: Install dependencies
        run: |
          # Try to install problematic packages separately with special handling
          if (Sys.info()["sysname"] == "Darwin" && R.version$status == "Under development (unstable)") {
            options(install.packages.check.source = "no")
            install.packages(c("data.table", "gam", "glmnet", "cvAUC", "SuperLearner"),
                           type = "binary",
                           repos = "https://cloud.r-project.org",
                           quiet = TRUE,
                           INSTALL_opts = "--no-multiarch")
          }

          # Install main dependencies
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")

          # Print system and package information for debugging
          cat("System information:\n")
          print(Sys.info())
          cat("\nR session information:\n")
          print(sessionInfo())
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          _R_CHECK_FORCE_SUGGESTS_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
